import React, {useEffect, useMemo, useState} from "react";
import {useTranslation} from "react-i18next";
import {ColDef, ColumnState, GridApi, GridOptions, RowNode} from "ag-grid-community";
import {ColumnLayout} from '@jpmuitk/column-layout';
import AlertsBanner, {BannerDisplayTypes, IBannerOptions} from "../../components/AlertsBanner";
import {Panel} from '@jpmuitk/panel';
import {IAlertData, ISelectedAlerts, SecurityCenterMessages, StatusTypes} from "../../store/pymtFraud/fraudTypes";
import {IApplicationState} from "../../store/types";
import {useDispatch, useSelector} from "react-redux";
import * as _ from "lodash";
import GridTools, {ToolGridActionTypes} from "../../components/grid/GridTools";
import FlyoutPanel from "../../components/flyout/FlyoutPanel";
import ActionsToolbar, {
  IDisabledActions,
  ToolbarActionTypes,
  ToolbarSelectionState} from "../../actions/ActionsToolbar";
import styled from "styled-components";
import FilterGrid from "./grid/FilterGrid";
import {changeDetailsPanelStatus, submitAlertsReset, updateSelectionCounts} from "../../store/pymtFraud/fraudActions";
import { findAlert, isStatusEditable, isStatusPendingSubmit} from "../../utils/Utilities";
import {getTransactionColumns, ITEMSFORREVIEWCOLUMNS} from "./Columns";
import {createStyles} from "@material-ui/core";
import {withStyles} from "@jpmuitk/theme";
import {changeSelectedAlertStatus, loadPayments} from "../../store/pymtFraud/fraudEffects";
import {IUserPreferences, LocalStorageName, PCCTabs} from "../../store/pcc/pccTypes";
import SubmitActionManager from './dialog/SubmitActionManager';
import FlyoutHeader from "../../components/flyout/FlyoutHeader";
import AlertsHeaderDetails from "../flyout/AlertsHeaderDetails";
import FlyoutContent from "../../components/flyout/FlyoutContent";
import DataDetail from "../../components/DataDetail";
import {changeFlyoutRecord, exportFlyoutComplete} from "../../store/pcc/actions";
import {createMetadata, exportFlyoutData} from "../flyout/FlyoutUtils";
import {GridExportTypes} from "../../components/grid/PCCGrid";
import {PCCTitleBox} from "../styles";

interface IAlertsProps {
  classes: {
    drawerOpen: string;
  }
}

const Alerts: React.FC<IAlertsProps> = ()  => {

  const {t} = useTranslation();
  const dispatch = useDispatch();
  /*------------------------Section: variables -----------------------------*/
  /*------------------------Section: useStates -----------------------------*/
  const [disableGridToolsNoData, setdisableGridToolsNoData] = useState(true);
  const [showBanner, setBanner] = useState(false);
  const [refreshFilters, setRefreshFilters] = useState(false); // flag to manually update filters
  const [refreshFlag, setRefreshFlag] = useState(false);// flag if manual refresh triggered
  const [isSubmitClicked, setIsSubmitClicked] = useState(false);

  /*------------------------Section: useSelectors -----------------------------*/
  const userPreferences: IUserPreferences = useSelector( (state: IApplicationState) => state.pcc.preferences.userPrefs);

  const currentTab: PCCTabs = useSelector((state: IApplicationState) => state.pcc.currentTab);

  const loadingAlerts:boolean = useSelector((state: IApplicationState) =>
    state.fraud.alerts.loading.loadingAlerts);

  const alertsData:IAlertData[] = useSelector((state: IApplicationState) => state.fraud.alerts.alertsData);

  const alertsMsg:string = useSelector((state: IApplicationState) => state.fraud.alerts.message);

  const selectedAlerts:ISelectedAlerts[] = useSelector((state: IApplicationState) =>
    state.pcc.activeGrid.selectedRows);

  const detailsPanelOpen:boolean = useSelector((state: IApplicationState) => state.fraud.alerts.detailsPanelOpen);

  const currentRecord: any = useSelector((state: IApplicationState) => {
    return state.pcc.flyout.currentRecord;
  });

  const environment:string = useSelector((state: IApplicationState) => state.pcc.appEnv.environment);

  const isGridPrinting:boolean = useSelector((state: IApplicationState) => {
    return state.pcc.activeGrid.loading.gridPrinting;
  });

  const submitStatus = useSelector( (state: IApplicationState) => state.fraud.alerts.submitStatus);

  const disabledActions: IDisabledActions = useSelector( (store: IApplicationState) => {
    const disabledBtns: any = {};
    const selAlerts = store.pcc.activeGrid.selectedRows;
    const flyoutOpen = store.fraud.alerts.detailsPanelOpen;
    disabledBtns[ToolbarActionTypes.SUBMIT] = (flyoutOpen || store.fraud.alerts.pendingSubmitData.length === 0);
    disabledBtns[ToolbarActionTypes.REMOVE] = (flyoutOpen || !selAlerts.length ||
      store.fraud.alerts.counts.pendingUserChange !== selAlerts.length )
    disabledBtns[ToolbarActionTypes.VIEW] =  flyoutOpen || !selAlerts.length;
    disabledBtns[ToolbarActionTypes.REJECT] = (flyoutOpen ||
      store.fraud.alerts.counts.pendingBankCount !== selAlerts.length  || selAlerts.length === 0 );
    disabledBtns[ToolbarActionTypes.APPROVE] = (flyoutOpen ||
      store.fraud.alerts.counts.pendingBankCount !== selAlerts.length || selAlerts.length === 0 );
    return disabledBtns;
  });

  const disableGridTools: boolean = useSelector((state: IApplicationState) => {
    return state.fraud.alerts.alertsData.length === 0;
  });

  const bannerOptions: IBannerOptions = useSelector((state: IApplicationState) => {

    const bannerOPT: IBannerOptions = {
      type: state.fraud.alerts.submitStatus.status,
      message: '',
      persist: false
    }
    if (state.fraud.alerts.submitStatus.totalCount !== 0 && state.fraud.alerts.submitStatus.status === BannerDisplayTypes.SUCCESS) {
      let msg = "";
      const alertStatus = state.fraud.alerts.submitStatus;
      const localGroup = 'submitMessages';
      const submittedMsg = (alertStatus.countSuccessful > 1) ? t(`${localGroup}.submitted.multiple`) : t(`${localGroup}.submitted.single`);
      msg = `${alertStatus.totalCount} ${submittedMsg}`;

      const oneManyStatus = (alertStatus.countSuccessful === 1) ? 'single' : 'multiple';
      let localizedMsg = `${localGroup}.${'successfulSubmissions'}.${oneManyStatus}`;

      if (alertStatus.suspectedFraud) {
        const oneManyFraud = (alertStatus.suspectedFraud === 1) ? 'single' : 'multiple';
        localizedMsg = `${localGroup}.${'successfulSubmissions'}.${oneManyFraud}.fraud`;
        if (alertStatus.suspectedFraud === alertStatus.countSuccessful) {
          // if ALL alerts selected were rejected for fraud adjust msg
          localizedMsg = `${localGroup}.${'successfulSubmissions'}.${oneManyFraud}.allFraud`;
          msg = `${alertStatus.suspectedFraud} ${t(localizedMsg)}`
        } else {
          msg += ` ${alertStatus.suspectedFraud} ${t(localizedMsg)}`
        }
      }

      bannerOPT.message = msg;
      bannerOPT.type = alertStatus.status;
      // closeSubmit(true);
    }

    else if(state.pcc.activeGrid.headerSelected && state.fraud.alerts.counts.pendingBankDecisionCount > 0) {
      bannerOPT.message = `${t('fraud.unusualActivity.HeaderMessage')}`;
      bannerOPT.type = BannerDisplayTypes.INFO;

    }
    return bannerOPT;
  });

  /*------------------------Section: useMemos -----------------------------*/
  const actionTools: ToolbarActionTypes[] = useMemo( () => {
    return [
      ToolbarActionTypes.VIEW,
      ToolbarActionTypes.APPROVE,
      ToolbarActionTypes.REJECT,
      ToolbarActionTypes.REMOVE,
      ToolbarActionTypes.SUBMIT
    ]
  },[]);
  const flyoutActionTools: ToolbarActionTypes[] = useMemo( () => {
    return [
      ToolbarActionTypes.APPROVE,
      ToolbarActionTypes.REJECT,
      ToolbarActionTypes.REMOVE,
      ToolbarActionTypes.SUBMIT
    ]
  },[]);

  const gridTools: ToolGridActionTypes[] = useMemo( () => {
    return [
      ToolGridActionTypes.EXPORT,
      ToolGridActionTypes.REFRESH,
      ToolGridActionTypes.HELP,
      ToolGridActionTypes.PRINT
    ]
  },[]);

  const disabledFlyoutActions: IDisabledActions = useSelector( (store: IApplicationState) => {
    if (detailsPanelOpen) {
      const disabledBtns: any = {};
      const alert = store.pcc.flyout.currentRecord
      disabledBtns[ToolbarActionTypes.SUBMIT] = alert !== null && !isStatusPendingSubmit((alert?.status as StatusTypes));
      disabledBtns[ToolbarActionTypes.REMOVE] = (alert !== null && !isStatusPendingSubmit(alert?.status as StatusTypes))
      disabledBtns[ToolbarActionTypes.REJECT] = (alert && (isStatusPendingSubmit(alert.status) || !isStatusEditable(alert.status)));
      disabledBtns[ToolbarActionTypes.APPROVE] = (alert && (isStatusPendingSubmit(alert.status) || !isStatusEditable(alert.status)));
      return disabledBtns;
    }
  });


  // Function needed to make sure each filter is sorted by originalStatus first no matter what. originalStatus allows Decisioned/bolded transactions to
  // appear at the top of the grid. Due to the user having the ability to move columns around, it is possible for originalStatus to not be in the first
  // index. That is why there is a for loop that looks for original status and checks if it is not sorted by desc. The else if exists so when it does
  // find originalStatus and finds out it is sorted by desc, it doesn't go through the rest of the array every time.

  const postSort = () => {
    if (gridOptions !== null && gridOptions !== undefined) {
      const oldSortModel = gridOptions.columnApi?.getColumnState();
      const columnDefs: ColDef[] | undefined = gridOptions.columnDefs;
      if (columnDefs !== undefined) {
        if (oldSortModel !== undefined && oldSortModel.length !== 0 && oldSortModel[0].colId !== undefined && oldSortModel[0].colId !== null) {
          for (const column of oldSortModel) {
            if (column.colId === ITEMSFORREVIEWCOLUMNS.ORIGINALSTATUS  && column.sort !== 'desc') {
              column.sort = 'desc';
              column.sortIndex = 0;

              for (const column2 of oldSortModel) {
                if (column2.colId !== ITEMSFORREVIEWCOLUMNS.ORIGINALSTATUS && column2.sort !== null && column2.sortIndex !== undefined &&  column2.sortIndex !== null) {
                  column2.sortIndex +=1;
                }

              }
              gridOptions.columnApi?.applyColumnState({
                state: oldSortModel
              })
              break;
            }
            else if (column.colId === ITEMSFORREVIEWCOLUMNS.ORIGINALSTATUS && column.sort === 'desc') {
              break;
            }
          }
        }
      }
    }
  }

  const gridOptions: GridOptions = useMemo( () => {
    return {
      defaultColDef: {
        flex: 1,
        editable: false,
        sortable: true,
        filter: true,
        columnsMenuParams: {
          suppressSyncLayoutWithGrid: false,
          suppressColumnSelectAll: true
        }
      },
      suppressClickEdit: true,
      animateRows: false,
      postSort,
      accentedSort: true, // to allow sorting by locale
      getRowNodeId: (data: IAlertData) => {
        return data.pccAlertKey.profileId + data.pccAlertKey.alertId + data.pccAlertKey.msgGuid;
      },

      columnDefs:  getTransactionColumns(t, userPreferences),
      rowData: []
    }
  },[]);
  /*------------------------Section: functions -----------------------------*/

  const rowUpdateCallback = (api: GridApi) => {
    if (api.getDisplayedRowCount() === 0) {
      setdisableGridToolsNoData(true);
    }
    else if (api.getDisplayedRowCount() !== 0) {
      setdisableGridToolsNoData(false);
    }
  }

  const gridReloadCallback = () => {
    // manual refresh called ==>  de-select rows, clear redux store of selected alerts and pending alerts,
    // refresh data
    gridOptions.api?.deselectAll();
    toggleDetailsPanel(true);
    dispatch(loadPayments(true));
    dispatch(updateSelectionCounts( []));
    setRefreshFlag(true);
  }



  const actionOnRecords = (actionType: ToolbarActionTypes, status?: string, record?: ISelectedAlerts) => {
    const updatedData: IAlertData[] = [];
    const checkAction = (alert : ISelectedAlerts | IAlertData) => {
      let data: any = {};
      switch (actionType) {

        case ToolbarActionTypes.APPROVE:
          if (alert.status === StatusTypes.PENDING_DECISION || alert.status === StatusTypes.ST_PENDING) {
            data = _.cloneDeep(alert);
            data.originalStatus = data.status;
            data.status = StatusTypes.ALERT_ACTION_APPROVE;
          }
          break;

        case ToolbarActionTypes.REMOVE:
          data = _.cloneDeep(alert);
          data.status = data.originalStatus;
          delete data.originalStatus; // delete property so original sort will resume
          break;

        case ToolbarActionTypes.REJECT:
          data = _.cloneDeep(alert);
          data.originalStatus = data.status;
          data.status = status;
          break;
      }

      return data
    }
    if (actionType === ToolbarActionTypes.SUBMIT) {
      setIsSubmitClicked(true);
    }
    else if (actionType === ToolbarActionTypes.VIEW) {
      dispatch(changeDetailsPanelStatus(true))
    }
    else if (record) {
      updatedData.push(checkAction(record))
      if (gridOptions && gridOptions.api) {
        gridOptions.api.applyTransactionAsync({ update: updatedData },() => {
          dispatch(changeSelectedAlertStatus(actionType, updatedData));
        })
      }

    }
    else if (gridOptions.api && !record) {
      const gridApi: GridApi = gridOptions.api;

      if (selectedAlerts.length) {
        _.forEach(selectedAlerts, (selectedAlert: ISelectedAlerts | IAlertData) => {
          if (selectedAlert) {
           updatedData.push(checkAction(selectedAlert))
          }
        });
      }

      // Apply updates for APPROVE, REMOVE or REJECT on grid
      gridApi.applyTransactionAsync({update: updatedData},
        () => {
          // callback - once Grid has updated its status
          dispatch(changeSelectedAlertStatus(actionType, updatedData));
          // const api = gridOptions.api as GridApi;
          if (gridApi) {
            gridApi.deselectAll();
            gridApi.paginationGoToFirstPage();
          }

        });

    }
  }

  const closeSubmit = (reset: boolean) => {
  if (!detailsPanelOpen) {
    if(reset) {
      setRefreshFilters(true);
      dispatch(loadPayments());
      displayBannerIfSuccess();
    }
    setIsSubmitClicked(false);
  }
  else if (detailsPanelOpen) {
    if (reset) {
      refreshPayments();
      displayBannerIfSuccess();
    }
    setIsSubmitClicked(false)
  }

  };

  const refreshPayments = () => {
    dispatch(loadPayments(undefined, true));
  }

  const displayBannerIfSuccess = () => {

    if (bannerOptions.type === BannerDisplayTypes.SUCCESS) {
      // if showBanner already true, need to reset it back to false and then show again.
      if (showBanner) {
        setBanner(false);
        setTimeout(() => {
          setBanner(true);
        },200)
      }
      else {
        setBanner(true);
      }
    }
  }

  const hideBanner = () => {
    setBanner(false);
    if (bannerOptions.type === BannerDisplayTypes.SUCCESS) {
      dispatch(submitAlertsReset())
    }
  };

  const hideBannerNoReset = () => {
    setBanner(false);
  }

  const toggleDetailsPanel = (resetFlyout?: boolean) => {
    if(resetFlyout) {
      dispatch(changeDetailsPanelStatus(false))
    } else {
      dispatch(changeDetailsPanelStatus(!detailsPanelOpen))
    }
    if (detailsPanelOpen) {
      gridOptions.api?.refreshClientSideRowModel('sort');
      dispatch(changeFlyoutRecord(null))
    }
  }

  const getMetaData = (data: any) => {
    return createMetadata(data.txnData, t, userPreferences)
  }

  const exportCallback = (exportAlerts: ISelectedAlerts[], exportOptions: GridExportTypes) => {

    const _metaDataArray = [];
    let metaData;
    for (const data of exportAlerts) {
      metaData = getMetaData(data)
      _metaDataArray.push(metaData)
    }
    exportFlyoutData(exportOptions, _metaDataArray, t)
    dispatch(exportFlyoutComplete())
  }

  /*------------------------Section: useCallbacks -----------------------------*/
  /*------------------------Section: useEffects -----------------------------*/
  useEffect( () => {
    if (gridOptions.api && alertsData.length && SecurityCenterMessages.UNUSUAL_TRANSACTION_FETCH_SUCCESS === alertsMsg) {
      let sortModel: ColumnState[] | undefined;
      if (refreshFlag) {
        // manual refresh triggered - retain sort model
        sortModel = gridOptions.columnApi?.getColumnState();
      }
      gridOptions.api.setRowData(alertsData);
      if (refreshFlag) {
        // if manual refresh re-apply sortModel after data update
        gridOptions.columnApi?.applyColumnState({
          state: sortModel
        })
        setRefreshFilters(true);
        setRefreshFlag(false);
      }
    }
  },[gridOptions, alertsData]);


  useEffect( () => {
    if (  currentTab  === PCCTabs.ALERTS && environment ) {
      gridReloadCallback()
    }
  },[currentTab, environment]);


  useEffect( () => {
    dispatch(updateSelectionCounts(selectedAlerts));
    if (gridOptions.api && selectedAlerts.length > 0 && alertsData.length > 0) {
      if (showBanner && !detailsPanelOpen) {
        hideBanner()
      }
      const currSelRows = gridOptions.api.getSelectedRows();
      // Select any nodes in the grid that are in selectedAlerts array
      gridOptions.api.forEachNode( (node: RowNode) => {
        const foundAlert: IAlertData | undefined = findAlert(selectedAlerts, node.data);
        if (foundAlert && (!node.isSelected() || _.find(currSelRows,{id: node.id}))) {
          node.setSelected( true);
          if (foundAlert && foundAlert.status !== node.data.status) {
            node.setData(foundAlert);
          }
        }
      });
      gridOptions.api?.refreshClientSideRowModel('filter');

    } else if (gridOptions.api) {
      gridOptions.api.onSortChanged();
      if (refreshFilters) {
        setRefreshFilters(false);
      }

    }

  },[selectedAlerts, alertsData]);

  useEffect( () => {
    if (submitStatus.countSuccessful === submitStatus.totalCount && submitStatus.countSuccessful !== 0) {
      setIsSubmitClicked(false);
    }
    else if (showBanner && submitStatus.status !== BannerDisplayTypes.SUCCESS && ((submitStatus.totalCount !== 0 &&
      submitStatus.countSuccessful !== submitStatus.totalCount) ||
      (submitStatus.statusCode !== "" && submitStatus.statusCode !== null))) {
      // If the current banner still exists and a new persistent banner exists
      hideBannerNoReset();
    }
  },[submitStatus]);


  useEffect( () => {
    if (gridOptions.api && detailsPanelOpen) {
      const api = gridOptions.api;
      const gridSelNodes: RowNode[] = api.getSelectedNodes();
      _.forEach(gridSelNodes, (node: RowNode) => {
        const foundAlert = findAlert(selectedAlerts, node.data);
        if (foundAlert && foundAlert.status !== node.data.status) {
          node.setData(foundAlert);
        }
      })
    }
  },[currentRecord, selectedAlerts]);


  useEffect(() => {
    if (bannerOptions.message && bannerOptions.type === BannerDisplayTypes.SUCCESS) {
      closeSubmit(true)
    }
    else if (bannerOptions.message && bannerOptions.type === BannerDisplayTypes.INFO) {
      setBanner(true)
    }
    else if (bannerOptions.message === '' && bannerOptions.type === BannerDisplayTypes.INFO && showBanner) {
      setBanner(false)
    }
  },[bannerOptions.message]);

  return (
    <AlertsContainer   data-testid={'pcc-alerts'}  >
      <AlertsBanner show={showBanner}  options={bannerOptions} onCloseCallback={hideBanner}/>
      <AlertsBox>
        <GridContainer>
          <PCCHeaderLayout justify="space-between" container={true}>
            <PCCTitleBox>
              {t('alertsTitle')}
            </PCCTitleBox>
            <ColumnLayout item={true}>
              <GridTools refreshCallback={gridReloadCallback}
                         disableGridTools={disableGridTools}
                         disableGridToolsNoDataInFilter={disableGridToolsNoData}
                         tools={gridTools} />
            </ColumnLayout>
          </PCCHeaderLayout>
          <GridWrapper $printing={isGridPrinting}>
            <FilterGrid  gridOptions={gridOptions}
                         reloadCallback={gridReloadCallback}
                         resizeCheck={detailsPanelOpen}
                         updateFilters={refreshFilters}
                         disableGridTools = {disableGridTools}
                         disableGridToolsNoDataInFilter = {disableGridToolsNoData}
                         rowUpdateCallback = {rowUpdateCallback}
                         timelyRefresh = {true}
                         localStorageName = {LocalStorageName.ALERTS}/>
          </GridWrapper>
          <GridFooterWrapper>
            { (alertsData.length && !loadingAlerts) ? (
              <ActionsToolbar
                onActionCallback={actionOnRecords}
                disabledActions={disabledActions}
                showSelections={ToolbarSelectionState.PENDING_AND_SELECTIONS}
                tools={actionTools}
              />
            ) : (<div/>)
            }
          </GridFooterWrapper>
        </GridContainer>

        <FlyoutPanel
          data={selectedAlerts}
          onCloseCallback={toggleDetailsPanel}
          showNavigation={true}
          open={detailsPanelOpen}
          exportCallback = {exportCallback}
          actionToolbar = {{onActionCallback : actionOnRecords, disabledActions: disabledFlyoutActions, tools: flyoutActionTools }}
          onCloseSubmitCallback = {closeSubmit}>
          <FlyoutHeader><AlertsHeaderDetails/></FlyoutHeader>
          <FlyoutContent><DataDetail metaDataCallback= {getMetaData}/></FlyoutContent>
        </FlyoutPanel>
      </AlertsBox>

      <SubmitActionManager activate={isSubmitClicked} onClose={closeSubmit}/>
    </AlertsContainer>
  );

}

const style = () => createStyles({
  drawerOpen: {
    'width': '500px',
    'display': 'flex',
    'flex': '1',
    'position': 'absolute',
    'top': '0',
    'right': '0',
    'height': '100%',
    'flexDirection': 'column'
  }
});


export const AlertsContainer = styled.div`
    width: 100%;
    height: 100%;
    flex-direction: column;
    display: flex;
 `;

export const AlertsBox = styled.div`
  display: flex;
  flex-direction: row;
  flex: 1 1 auto;
  position: relative;
`;

export const GridContainer = styled.div`
   height: 100%;
   display: flex;
   flex-direction: column;
   padding: 0px;
   flex: 1
`;

const  FlyoutPanelWrapper = styled(Panel)`
  display: flex;
    flex: 0 510px;
    height: 100%;
    flex-direction: column;
    border-left: 2px solid #ccc;
    padding: 0;
`;

export const GridFooterWrapper = styled(Panel)`
    padding: 15px 0px;
    height: max-content;
    display: flex;
`;

const GridWrapper= styled(Panel)<{$printing: boolean}>`
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    padding: 0px;
    maxWidth: ${props => props.$printing ? '290mm': 'inherit'}
`;

const PCCHeaderLayout = styled(ColumnLayout)`
    margin-top: ${props => `${props.theme.spacing(5)}px`};
    margin-bottom: ${props => `${props.theme.spacing(2)}px`};
`;

export default withStyles(style)(Alerts);
